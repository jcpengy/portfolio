{"mappings":";;;;;AAoCA;;;;;OAKO,SAASA,YAAT,CACLC,KADK,EAELC,GAFK,EAGU;AACf,MAAI;AACFC,IAAAA,gBAAgB,GAAG,OADjB;AAEFC,IAAAA,UAAU,GAAG,KAFX;AAGFC,IAAAA,UAAU,GAAG,KAHX;AAIFC,IAAAA,UAAU,GAAG,KAJX;AAKFC,IAAAA,eALE;AAMFC,IAAAA,IAAI,GAAG,MANL;AAOFC,IAAAA,QAAQ,EAARA,SAAQ,GAAG,MAAM,CAAE;AAPjB,MAQAR,KARJ;AASA,MAAI;AAACS,IAAAA;AAAD,MAAmBC,YAAY,CAACV,KAAD,EAAQC,GAAR,CAAnC;AACA,MAAI;AAACU,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA2BC,QAAQ,CAACb,KAAD,CAAvC;AACA,MAAIc,QAAQ,GAAGC,cAAc,CAACf,KAAD,EAAQ;AAACgB,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AAEA,QAAMC,cAAc,GAAG;AACrBV,IAAAA,IADqB;AAErBW,IAAAA,OAAO,EAAElB,KAAK,CAACkB;AAFM,GAAvB;AAKA,SAAO;AACLP,IAAAA,UADK;AAELQ,IAAAA,UAAU,EAAEC,UAAU,CACpBN,QADoB,EAEpBZ,gBAAgB,KAAK,OAArB,IAAgCe,cAFZ;AAIlBI,MAAAA,QAAQ,EAAElB,UAJQ;AAKlBmB,MAAAA,QAAQ,EAAEjB,UALQ;AAMlB,uBAAiBD,UAAU,IAAImB,SANb;AAOlB,sBAAgBjB,eAAe,KAAK,SAApB,IAAiCiB,SAP/B;AAQlB,2BAAqBvB,KAAK,CAAC,mBAAD,CARR;AASlB,+BAAyBA,KAAK,CAAC,uBAAD,CATZ;AAUlB,2BAAqBA,KAAK,CAAC,mBAAD,CAVR;AAWlB,uBAAiBA,KAAK,CAAC,eAAD,CAXJ;AAYlBwB,MAAAA,KAAK,EAAExB,KAAK,CAACwB,KAZK;AAalBC,MAAAA,YAAY,EAAEzB,KAAK,CAACwB,KAAN,GAAcD,SAAd,GAA0BvB,KAAK,CAACyB,YAb5B;AAclBjB,MAAAA,QAAQ,EAAGkB,CAAD,IAAsClB,SAAQ,CAACkB,CAAC,CAACC,MAAF,CAASH,KAAV,CAdtC;AAelBI,MAAAA,YAAY,EAAE5B,KAAK,CAAC4B,YAfF;AAgBlBC,MAAAA,SAAS,EAAE7B,KAAK,CAAC6B,SAhBC;AAiBlBC,MAAAA,SAAS,EAAE9B,KAAK,CAAC8B,SAjBC;AAkBlBC,MAAAA,IAAI,EAAE/B,KAAK,CAAC+B,IAlBM;AAmBlBC,MAAAA,WAAW,EAAEhC,KAAK,CAACgC,WAnBD;AAoBlBC,MAAAA,SAAS,EAAEjC,KAAK,CAACiC,SApBC;AAsBlB;AACAC,MAAAA,MAAM,EAAElC,KAAK,CAACkC,MAvBI;AAwBlBC,MAAAA,KAAK,EAAEnC,KAAK,CAACmC,KAxBK;AAyBlBC,MAAAA,OAAO,EAAEpC,KAAK,CAACoC,OAzBG;AA2BlB;AACAC,MAAAA,gBAAgB,EAAErC,KAAK,CAACqC,gBA5BN;AA6BlBC,MAAAA,kBAAkB,EAAEtC,KAAK,CAACsC,kBA7BR;AA8BlBC,MAAAA,mBAAmB,EAAEvC,KAAK,CAACuC,mBA9BT;AAgClB;AACAC,MAAAA,QAAQ,EAAExC,KAAK,CAACwC,QAjCE;AAmClB;AACAC,MAAAA,aAAa,EAAEzC,KAAK,CAACyC,aApCH;AAqClBC,MAAAA,OAAO,EAAE1C,KAAK,CAAC0C;AArCG,OAsCfjC,cAtCe,EAuCfG,UAvCe;AAFjB,GAAP;AA6CD","sources":["./packages/@react-aria/textfield/src/useTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, TextareaHTMLAttributes} from 'react';\nimport {ElementType} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\ninterface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\ninterface AriaTextFieldOptions extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: ElementType\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField(\n  props: AriaTextFieldOptions,\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement>\n): TextFieldAria {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    )\n  };\n}\n"],"names":["useTextField","props","ref","inputElementType","isDisabled","isRequired","isReadOnly","validationState","type","onChange","focusableProps","useFocusable","labelProps","fieldProps","useLabel","domProps","filterDOMProps","labelable","inputOnlyProps","pattern","inputProps","mergeProps","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput"],"version":3,"file":"module.js.map"}
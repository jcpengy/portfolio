import { useEffect, useRef } from "react";
import { useLocale } from "@react-aria/i18n";
import { filterDOMProps, mergeProps } from "@react-aria/utils";
import { createFocusManager } from "@react-aria/focus";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
const $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES = {
  'none': 'toolbar',
  'single': 'radiogroup',
  'multiple': 'toolbar'
};
export function useActionGroup(props, state, ref) {
  let {
    isDisabled,
    orientation = 'horizontal'
  } = props;
  let allKeys = [...state.collection.getKeys()];

  if (!allKeys.some(key => !state.disabledKeys.has(key))) {
    isDisabled = true;
  }

  let {
    direction
  } = useLocale();
  let focusManager = createFocusManager(ref);
  let flipDirection = direction === 'rtl' && orientation === 'horizontal';

  let onKeyDown = e => {
    if (!e.currentTarget.contains(e.target)) {
      return;
    }

    switch (e.key) {
      case 'ArrowRight':
      case 'ArrowDown':
        e.preventDefault();
        e.stopPropagation();

        if (e.key === 'ArrowRight' && flipDirection) {
          focusManager.focusPrevious({
            wrap: true
          });
        } else {
          focusManager.focusNext({
            wrap: true
          });
        }

        break;

      case 'ArrowLeft':
      case 'ArrowUp':
        e.preventDefault();
        e.stopPropagation();

        if (e.key === 'ArrowLeft' && flipDirection) {
          focusManager.focusNext({
            wrap: true
          });
        } else {
          focusManager.focusPrevious({
            wrap: true
          });
        }

        break;
    }
  };

  let role = $d6b03789ac7a9e8dac0d1b0b$var$BUTTON_GROUP_ROLES[state.selectionManager.selectionMode];
  return {
    actionGroupProps: _babelRuntimeHelpersEsmExtends({}, filterDOMProps(props, {
      labelable: true
    }), {
      role,
      'aria-orientation': role === 'toolbar' ? orientation : null,
      'aria-disabled': isDisabled,
      onKeyDown
    })
  };
}
const $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES = {
  'none': null,
  'single': 'radio',
  'multiple': 'checkbox'
}; // eslint-disable-next-line @typescript-eslint/no-unused-vars

export function useActionGroupItem(props, state, ref) {
  let selectionMode = state.selectionManager.selectionMode;
  let buttonProps = {
    role: $d68d5fee7c6cb722ef27fbc6b2392061$var$BUTTON_ROLES[selectionMode]
  };

  if (selectionMode !== 'none') {
    let isSelected = state.selectionManager.isSelected(props.key);
    buttonProps['aria-checked'] = isSelected;
  }

  let isFocused = props.key === state.selectionManager.focusedKey;
  let lastRender = useRef({
    isFocused,
    state
  });
  lastRender.current = {
    isFocused,
    state
  }; // If the focused item is removed from the DOM, reset the focused key to null.
  // eslint-disable-next-line arrow-body-style

  useEffect(() => {
    return () => {
      if (lastRender.current.isFocused) {
        lastRender.current.state.selectionManager.setFocusedKey(null);
      }
    };
  }, []);
  return {
    buttonProps: mergeProps(buttonProps, {
      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,

      onFocus() {
        state.selectionManager.setFocusedKey(props.key);
      },

      onPress() {
        state.selectionManager.select(props.key);
      }

    })
  };
}
//# sourceMappingURL=module.js.map

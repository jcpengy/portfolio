import { useFormProps } from "@react-spectrum/form";
import { useCheckboxGroupState } from "@react-stately/checkbox";
import { Label } from "@react-spectrum/label";
import { useToggleState } from "@react-stately/toggle";
import { useProviderProps, Provider } from "@react-spectrum/provider";
import { useHover } from "@react-aria/interactions";
import { useCheckbox, useCheckboxGroupItem, useCheckboxGroup } from "@react-aria/checkbox";
import { FocusRing } from "@react-aria/focus";
import _spectrumIconsUiDashSmall from "@spectrum-icons/ui/DashSmall";
import { classNames, useFocusableRef, useStyleProps, useDOMRef } from "@react-spectrum/utils";
import _spectrumIconsUiCheckmarkSmall from "@spectrum-icons/ui/CheckmarkSmall";
import _react, { forwardRef, useContext, useRef } from "react";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

const $bde9b0e0d548308768028eb5bb392fd8$export$CheckboxGroupContext = /*#__PURE__*/_react.createContext(null);

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/checkbox/vars.css
var $f30999564e5c72d738e3a371addc872$exports = {};
$f30999564e5c72d738e3a371addc872$exports = {
  "spectrum-Checkbox": "_spectrum-Checkbox_0ffa4",
  "spectrum-Checkbox-input": "_spectrum-Checkbox-input_0ffa4",
  "focus-ring": "_focus-ring_0ffa4",
  "spectrum-Checkbox-box": "_spectrum-Checkbox-box_0ffa4",
  "is-indeterminate": "_is-indeterminate_0ffa4",
  "spectrum-Checkbox-checkmark": "_spectrum-Checkbox-checkmark_0ffa4",
  "spectrum-Checkbox-partialCheckmark": "_spectrum-Checkbox-partialCheckmark_0ffa4",
  "is-checked": "_is-checked_0ffa4",
  "spectrum-Checkbox-label": "_spectrum-Checkbox-label_0ffa4",
  "is-hovered": "_is-hovered_0ffa4",
  "spectrum-Checkbox--quiet": "_spectrum-Checkbox--quiet_0ffa4",
  "is-invalid": "_is-invalid_0ffa4"
};
var $f30999564e5c72d738e3a371addc872$$interop$default = $parcel$interopDefault($f30999564e5c72d738e3a371addc872$exports);

function $e1b4ba32ec7b6456ce724babf7eb8$var$Checkbox(props, ref) {
  let originalProps = props;
  props = useProviderProps(props);

  let {
    isIndeterminate = false,
    isEmphasized = false,
    isDisabled = false,
    autoFocus,
    children,
    validationState
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["isIndeterminate", "isEmphasized", "isDisabled", "autoFocus", "children", "validationState"]);

  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    hoverProps,
    isHovered
  } = useHover({
    isDisabled
  });
  let inputRef = useRef(null);
  let domRef = useFocusableRef(ref, inputRef); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.
  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
  // but since the checkbox won't move in and out of a group, it should be safe.

  let groupState = useContext($bde9b0e0d548308768028eb5bb392fd8$export$CheckboxGroupContext);
  let {
    inputProps
  } = groupState // eslint-disable-next-line react-hooks/rules-of-hooks
  ? useCheckboxGroupItem(_babelRuntimeHelpersEsmExtends({}, props, {
    // Value is optional for standalone checkboxes, but required for CheckboxGroup items;
    // it's passed explicitly here to avoid typescript error (requires strictNullChecks disabled).
    value: props.value,
    // Only pass isRequired and validationState to react-aria if they came from
    // the props for this individual checkbox, and not from the group via context.
    isRequired: originalProps.isRequired,
    validationState: originalProps.validationState
  }), groupState, inputRef) // eslint-disable-next-line react-hooks/rules-of-hooks
  : useCheckbox(props, useToggleState(props), inputRef);
  let markIcon = isIndeterminate ? /*#__PURE__*/_react.createElement(_spectrumIconsUiDashSmall, {
    UNSAFE_className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox-partialCheckmark')
  }) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkSmall, {
    UNSAFE_className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox-checkmark')
  });

  if (groupState) {
    for (let key of ['isSelected', 'defaultSelected', 'isEmphasized']) {
      if (originalProps[key] != null) {
        console.warn(key + " is unsupported on individual <Checkbox> elements within a <CheckboxGroup>. Please apply these props to the group instead.");
      }
    }

    if (props.value == null) {
      console.warn('A <Checkbox> element within a <CheckboxGroup> requires a `value` property.');
    }
  }

  return /*#__PURE__*/_react.createElement("label", _babelRuntimeHelpersEsmExtends({}, styleProps, hoverProps, {
    ref: domRef,
    className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox', {
      'is-checked': inputProps.checked,
      'is-indeterminate': isIndeterminate,
      'spectrum-Checkbox--quiet': !isEmphasized,
      'is-invalid': validationState === 'invalid',
      'is-disabled': isDisabled,
      'is-hovered': isHovered
    }, styleProps.className)
  }), /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'focus-ring'),
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement("input", _babelRuntimeHelpersEsmExtends({}, inputProps, {
    ref: inputRef,
    className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox-input')
  }))), /*#__PURE__*/_react.createElement("span", {
    className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox-box')
  }, markIcon), children && /*#__PURE__*/_react.createElement("span", {
    className: classNames($f30999564e5c72d738e3a371addc872$$interop$default, 'spectrum-Checkbox-label')
  }, children));
}
/**
 * Checkboxes allow users to select multiple items from a list of individual items,
 * or to mark one individual item as selected.
 */


export let Checkbox = /*#__PURE__*/forwardRef($e1b4ba32ec7b6456ce724babf7eb8$var$Checkbox);
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {};
$c9fb1f4220ea2c59cb2e10f0e9828c6e$exports = {
  "spectrum-FieldLabel": "_spectrum-FieldLabel_36b9b",
  "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_36b9b",
  "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_36b9b",
  "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_36b9b",
  "spectrum-Field": "_spectrum-Field_36b9b",
  "spectrum-Field--positionTop": "_spectrum-Field--positionTop_36b9b",
  "spectrum-Field-field": "_spectrum-Field-field_36b9b",
  "spectrum-Field-field--multiline": "_spectrum-Field-field--multiline_36b9b",
  "spectrum-Field--positionSide": "_spectrum-Field--positionSide_36b9b",
  "spectrum-Form": "_spectrum-Form_36b9b",
  "spectrum-Form--positionSide": "_spectrum-Form--positionSide_36b9b",
  "spectrum-Form--positionTop": "_spectrum-Form--positionTop_36b9b",
  "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_36b9b",
  "is-disabled": "_is-disabled_36b9b"
};
// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/fieldgroup/vars.css
var $d9233c793c189283ec9d2429b27b9$exports = {};
$d9233c793c189283ec9d2429b27b9$exports = {
  "spectrum-FieldGroup": "_spectrum-FieldGroup_8cb9b",
  "spectrum-FieldGroup--positionSide": "_spectrum-FieldGroup--positionSide_8cb9b",
  "spectrum-FieldGroup-group": "_spectrum-FieldGroup-group_8cb9b",
  "spectrum-FieldGroup-group--horizontal": "_spectrum-FieldGroup-group--horizontal_8cb9b"
};
var $d9233c793c189283ec9d2429b27b9$$interop$default = $parcel$interopDefault($d9233c793c189283ec9d2429b27b9$exports);
var $c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default = $parcel$interopDefault($c9fb1f4220ea2c59cb2e10f0e9828c6e$exports);

function $e22ad9c258293c82626b875dc3985$var$CheckboxGroup(props, ref) {
  props = useProviderProps(props);
  props = useFormProps(props);

  let {
    isEmphasized,
    isRequired,
    necessityIndicator,
    label,
    labelPosition = 'top',
    labelAlign,
    children,
    orientation = 'vertical',
    validationState
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["isEmphasized", "isRequired", "necessityIndicator", "label", "labelPosition", "labelAlign", "children", "orientation", "validationState"]);

  let domRef = useDOMRef(ref);
  let {
    styleProps
  } = useStyleProps(otherProps);
  let state = useCheckboxGroupState(props);
  let {
    labelProps,
    groupProps
  } = useCheckboxGroup(props, state);
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, groupProps, {
    className: classNames($d9233c793c189283ec9d2429b27b9$$interop$default, 'spectrum-FieldGroup', {
      'spectrum-FieldGroup--positionSide': labelPosition === 'side'
    }, // This is so checkbox group works inside a <Form>
    classNames($c9fb1f4220ea2c59cb2e10f0e9828c6e$$interop$default, 'spectrum-Field'), styleProps.className),
    ref: domRef
  }), label && /*#__PURE__*/_react.createElement(Label, _babelRuntimeHelpersEsmExtends({}, labelProps, {
    elementType: "span",
    labelPosition: labelPosition,
    labelAlign: labelAlign,
    isRequired: isRequired,
    necessityIndicator: necessityIndicator,
    includeNecessityIndicatorInAccessibilityName: true
  }), label), /*#__PURE__*/_react.createElement("div", {
    role: "presentation",
    className: classNames($d9233c793c189283ec9d2429b27b9$$interop$default, 'spectrum-FieldGroup-group', {
      'spectrum-FieldGroup-group--horizontal': orientation === 'horizontal'
    })
  }, /*#__PURE__*/_react.createElement(Provider, {
    isEmphasized: isEmphasized,
    validationState: validationState
  }, /*#__PURE__*/_react.createElement($bde9b0e0d548308768028eb5bb392fd8$export$CheckboxGroupContext.Provider, {
    value: state
  }, children))));
}
/**
 * A CheckboxGroup allows users to select one or more items from a list of choices.
 */


export const CheckboxGroup = /*#__PURE__*/_react.forwardRef($e22ad9c258293c82626b875dc3985$var$CheckboxGroup);
//# sourceMappingURL=module.js.map

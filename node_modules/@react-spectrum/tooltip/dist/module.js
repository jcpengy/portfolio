import { useTooltipTriggerState } from "@react-stately/tooltip";
import { useOverlayPosition } from "@react-aria/overlays";
import { Overlay } from "@react-spectrum/overlays";
import { FocusableProvider } from "@react-aria/focus";
import { useTooltip, useTooltipTrigger } from "@react-aria/tooltip";
import _spectrumIconsUiSuccessSmall from "@spectrum-icons/ui/SuccessSmall";
import _react, { useContext, useImperativeHandle, useRef } from "react";
import { mergeProps } from "@react-aria/utils";
import _spectrumIconsUiInfoSmall from "@spectrum-icons/ui/InfoSmall";
import { classNames, createDOMRef, useStyleProps } from "@react-spectrum/utils";
import _spectrumIconsUiAlertSmall from "@spectrum-icons/ui/AlertSmall";
import _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import "./main.css";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tooltip/vars.css
var $fce0adf931fbcb6e5bbc907c5444$exports = {};
$fce0adf931fbcb6e5bbc907c5444$exports = {
  "spectrum-Tooltip": "_spectrum-Tooltip_23042",
  "is-open": "_is-open_23042",
  "spectrum-Tooltip--bottom": "_spectrum-Tooltip--bottom_23042",
  "spectrum-Tooltip--top": "_spectrum-Tooltip--top_23042",
  "spectrum-Tooltip--right": "_spectrum-Tooltip--right_23042",
  "spectrum-Tooltip--left": "_spectrum-Tooltip--left_23042",
  "spectrum-Tooltip-tip": "_spectrum-Tooltip-tip_23042",
  "spectrum-Tooltip-typeIcon": "_spectrum-Tooltip-typeIcon_23042",
  "spectrum-Tooltip-label": "_spectrum-Tooltip-label_23042",
  "u-tooltip-showOnHover": "_u-tooltip-showOnHover_23042",
  "is-hovered": "_is-hovered_23042",
  "is-focused": "_is-focused_23042",
  "spectrum-Tooltip--negative": "_spectrum-Tooltip--negative_23042",
  "spectrum-Tooltip--error": "_spectrum-Tooltip--error_23042",
  "spectrum-Tooltip--info": "_spectrum-Tooltip--info_23042",
  "spectrum-Tooltip--help": "_spectrum-Tooltip--help_23042",
  "spectrum-Tooltip--positive": "_spectrum-Tooltip--positive_23042",
  "spectrum-Tooltip--success": "_spectrum-Tooltip--success_23042"
};

const $d79690ed71d0e589905a11b2fa970c7$export$TooltipContext = /*#__PURE__*/_react.createContext({});

let $bbf06d7c74e4575391edac06758d45$var$iconMap = {
  info: _spectrumIconsUiInfoSmall,
  positive: _spectrumIconsUiSuccessSmall,
  negative: _spectrumIconsUiAlertSmall
};
var $fce0adf931fbcb6e5bbc907c5444$$interop$default = $parcel$interopDefault($fce0adf931fbcb6e5bbc907c5444$exports);

function $bbf06d7c74e4575391edac06758d45$var$Tooltip(props, ref) {
  let _useContext = useContext($d79690ed71d0e589905a11b2fa970c7$export$TooltipContext),
      {
    ref: overlayRef,
    arrowProps,
    state
  } = _useContext,
      tooltipProviderProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(_useContext, ["ref", "arrowProps", "state"]);

  let defaultRef = useRef();
  overlayRef = overlayRef || defaultRef;
  props = mergeProps(props, tooltipProviderProps);

  let {
    variant = 'neutral',
    placement = 'top',
    isOpen,
    showIcon
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, ["variant", "placement", "isOpen", "showIcon"]);

  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    tooltipProps
  } = useTooltip(props, state); // Sync ref with overlayRef from context.

  useImperativeHandle(ref, () => createDOMRef(overlayRef));
  let Icon = $bbf06d7c74e4575391edac06758d45$var$iconMap[variant];
  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, tooltipProps, {
    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip', "spectrum-Tooltip--" + variant, "spectrum-Tooltip--" + placement, {
      'is-open': isOpen
    }, styleProps.className),
    ref: overlayRef
  }), showIcon && variant !== 'neutral' && /*#__PURE__*/_react.createElement(Icon, {
    UNSAFE_className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-typeIcon'),
    "aria-hidden": true
  }), props.children && /*#__PURE__*/_react.createElement("span", {
    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-label')
  }, props.children), /*#__PURE__*/_react.createElement("span", _babelRuntimeHelpersEsmExtends({}, arrowProps, {
    className: classNames($fce0adf931fbcb6e5bbc907c5444$$interop$default, 'spectrum-Tooltip-tip')
  })));
}
/**
 * Display container for Tooltip content. Has a directional arrow dependent on its placement.
 */


export let Tooltip = /*#__PURE__*/_react.forwardRef($bbf06d7c74e4575391edac06758d45$var$Tooltip);
const $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_OFFSET = -1; // Offset needed to reach 4px/5px (med/large) distance between tooltip and trigger button

const $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_CROSS_OFFSET = 0;

function $af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger(props) {
  let {
    children,
    crossOffset = $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_CROSS_OFFSET,
    isDisabled,
    offset = $af9462b3a75853dd6b5cae0d0c0ce5a$var$DEFAULT_OFFSET,
    trigger: triggerAction
  } = props;

  let [trigger, tooltip] = _react.Children.toArray(children);

  let state = useTooltipTriggerState(props);
  let tooltipTriggerRef = useRef();
  let overlayRef = useRef();
  let {
    triggerProps,
    tooltipProps
  } = useTooltipTrigger({
    isDisabled,
    trigger: triggerAction
  }, state, tooltipTriggerRef);
  let {
    overlayProps,
    arrowProps,
    placement
  } = useOverlayPosition({
    placement: props.placement || 'top',
    targetRef: tooltipTriggerRef,
    overlayRef,
    offset,
    crossOffset,
    isOpen: state.isOpen
  });
  return /*#__PURE__*/_react.createElement(FocusableProvider, _babelRuntimeHelpersEsmExtends({}, triggerProps, {
    ref: tooltipTriggerRef
  }), trigger, /*#__PURE__*/_react.createElement($d79690ed71d0e589905a11b2fa970c7$export$TooltipContext.Provider, {
    value: _babelRuntimeHelpersEsmExtends({
      state,
      placement,
      ref: overlayRef,
      UNSAFE_style: overlayProps.style,
      arrowProps
    }, tooltipProps)
  }, /*#__PURE__*/_react.createElement(Overlay, {
    isOpen: state.isOpen
  }, tooltip)));
} // Support TooltipTrigger inside components using CollectionBuilder.


$af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger.getCollectionNode = function* (props) {
  // Replaced the use of React.Childern.toArray because it mutates the key prop.
  let childArray = [];

  _react.Children.forEach(props.children, child => {
    if ( /*#__PURE__*/_react.isValidElement(child)) {
      childArray.push(child);
    }
  });

  let [trigger, tooltip] = childArray;
  yield {
    element: trigger,
    wrapper: element => /*#__PURE__*/_react.createElement($af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger, _babelRuntimeHelpersEsmExtends({
      key: element.key
    }, props), element, tooltip)
  };
};
/**
 * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing
 * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip
 * relative to the trigger.
 */
// We don't want getCollectionNode to show up in the type definition


export let TooltipTrigger = $af9462b3a75853dd6b5cae0d0c0ce5a$var$TooltipTrigger;
//# sourceMappingURL=module.js.map

var {
  useTabsState
} = require("@react-stately/tabs");

var {
  useTab,
  useTabs
} = require("@react-aria/tabs");

var {
  useProvider,
  useProviderProps
} = require("@react-spectrum/provider");

var {
  useLocale
} = require("@react-aria/i18n");

var {
  useHover
} = require("@react-aria/interactions");

var {
  Text
} = require("@react-spectrum/text");

var _react2 = require("react");

var _react = $parcel$interopDefault(_react2);

var {
  useCallback,
  useEffect,
  useRef,
  useState
} = _react2;

var {
  mergeProps,
  useId,
  useLayoutEffect,
  useResizeObserver
} = require("@react-aria/utils");

var {
  Item: _Item,
  Picker
} = require("@react-spectrum/picker");

var {
  FocusRing
} = require("@react-aria/focus");

var {
  classNames,
  SlotProvider,
  unwrapDOMRef,
  useDOMRef,
  useStyleProps,
  useValueEffect
} = require("@react-spectrum/utils");

var _babelRuntimeHelpersObjectWithoutPropertiesLoose = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

var {
  Item
} = require("@react-stately/collections");

exports.Item = Item;

require("./main.css");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tabs/vars.css
var $a221257d7bd2e9d0c131cda7c75f4f5$exports = {};
$a221257d7bd2e9d0c131cda7c75f4f5$exports = {
  "spectrum-TabsPanel": "_spectrum-TabsPanel_0248f",
  "spectrum-TabsPanel--horizontal": "_spectrum-TabsPanel--horizontal_0248f",
  "spectrum-TabsPanel--vertical": "_spectrum-TabsPanel--vertical_0248f",
  "spectrum-Tabs": "_spectrum-Tabs_0248f",
  "spectrum-Tabs-item": "_spectrum-Tabs-item_0248f",
  "is-disabled": "_is-disabled_0248f",
  "spectrum-Tabs-itemLabel": "_spectrum-Tabs-itemLabel_0248f",
  "spectrum-Icon": "_spectrum-Icon_0248f",
  "spectrum-Tabs-selectionIndicator": "_spectrum-Tabs-selectionIndicator_0248f",
  "spectrum-Tabs--horizontal": "_spectrum-Tabs--horizontal_0248f",
  "spectrum-Tabs--compact": "_spectrum-Tabs--compact_0248f",
  "spectrum-Tabs--isCollapsed": "_spectrum-Tabs--isCollapsed_0248f",
  "spectrum-Tabs--quiet": "_spectrum-Tabs--quiet_0248f",
  "spectrum-Tabs--vertical": "_spectrum-Tabs--vertical_0248f",
  "spectrum-TabsPanel-collapseWrapper": "_spectrum-TabsPanel-collapseWrapper_0248f",
  "spectrum-TabsPanel-tabs": "_spectrum-TabsPanel-tabs_0248f",
  "focus-ring": "_focus-ring_0248f",
  "is-hovered": "_is-hovered_0248f",
  "is-selected": "_is-selected_0248f"
};
var $a221257d7bd2e9d0c131cda7c75f4f5$$interop$default = $parcel$interopDefault($a221257d7bd2e9d0c131cda7c75f4f5$exports);

function $a016f96d614f365ec6ad3cd2df19b52$var$Tabs(props, ref) {
  props = useProviderProps(props);

  let {
    orientation = 'horizontal',
    isDisabled,
    isQuiet,
    density = 'regular',
    children
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["orientation", "isDisabled", "isQuiet", "density", "children"]);

  let domRef = useDOMRef(ref);
  let tablistRef = useRef();
  let wrapperRef = useRef();
  let state = useTabsState(props);
  let {
    direction
  } = useLocale();
  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    tabListProps,
    tabPanelProps
  } = useTabs(props, state, tablistRef);
  let [collapse, setCollapse] = useValueEffect(false);
  let [selectedTab, setSelectedTab] = useState();
  useEffect(() => {
    if (tablistRef.current) {
      let selectedTab = tablistRef.current.querySelector("[data-key=\"" + state.selectedKey + "\"]");

      if (selectedTab != null) {
        setSelectedTab(selectedTab);
      }
    } // collapse is in the dep array so selectedTab can be updated for TabLine positioning

  }, [children, state.selectedKey, collapse, tablistRef]);
  let checkShouldCollapse = useCallback(() => {
    let computeShouldCollapse = () => {
      if (wrapperRef.current) {
        let tabsComponent = wrapperRef.current;
        let tabs = tablistRef.current.querySelectorAll('[role="tab"]');
        let lastTab = tabs[tabs.length - 1];
        let end = direction === 'rtl' ? 'left' : 'right';
        let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];
        let farEdgeLastTab = lastTab == null ? void 0 : lastTab.getBoundingClientRect()[end];
        let shouldCollapse = direction === 'rtl' ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;
        return shouldCollapse;
      }
    };

    if (orientation !== 'vertical') {
      setCollapse(function* () {
        // Make Tabs render in non-collapsed state
        yield false; // Compute if Tabs should collapse and update

        yield computeShouldCollapse();
      });
    }
  }, [tablistRef, wrapperRef, direction, orientation, setCollapse]);
  useEffect(() => {
    checkShouldCollapse();
  }, [children, checkShouldCollapse]);
  useResizeObserver({
    ref: wrapperRef,
    onResize: checkShouldCollapse
  }); // When the tabs are collapsed, the tabPanel should be labelled by the Picker button element.

  let collapsibleTabListId = useId();

  if (collapse && orientation !== 'vertical') {
    tabPanelProps['aria-labelledby'] = collapsibleTabListId;
  }

  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, styleProps, {
    ref: domRef,
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel', "spectrum-TabsPanel--" + orientation, styleProps.className)
  }), orientation === 'vertical' && /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabList, _babelRuntimeHelpersExtends({}, tabListProps, {
    ref: tablistRef,
    orientation: orientation,
    density: density,
    isQuiet: isQuiet,
    isDisabled: isDisabled,
    state: state,
    selectedTab: selectedTab
  })), orientation !== 'vertical' && /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$CollapsibleTabList, _babelRuntimeHelpersExtends({}, props, {
    id: collapsibleTabListId,
    wrapperRef: wrapperRef,
    collapse: collapse,
    tabListProps: tabListProps,
    state: state,
    selectedTab: selectedTab,
    ref: tablistRef
  })), /*#__PURE__*/_react.createElement("div", tabPanelProps, state.selectedItem && state.selectedItem.props.children));
}

function Tab(props) {
  let {
    item,
    state,
    isDisabled: propsDisabled
  } = props;
  let {
    key,
    rendered
  } = item;
  let isDisabled = propsDisabled || state.disabledKeys.has(key);
  let ref = useRef();
  let {
    tabProps
  } = useTab({
    item,
    isDisabled
  }, state, ref);
  let {
    hoverProps,
    isHovered
  } = useHover(_babelRuntimeHelpersExtends({}, props));
  let isSelected = state.selectedKey === key;
  return /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'focus-ring')
  }, /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, mergeProps(tabProps, hoverProps), {
    ref: ref,
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-item', {
      'is-selected': isSelected,
      'is-disabled': isDisabled,
      'is-hovered': isHovered
    })
  }), /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      icon: {
        size: 'S',
        UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Icon')
      },
      text: {
        UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-itemLabel')
      }
    }
  }, typeof rendered === 'string' ? /*#__PURE__*/_react.createElement(Text, null, rendered) : rendered)));
}

exports.Tab = Tab;

function $a016f96d614f365ec6ad3cd2df19b52$var$TabLine(props) {
  let {
    orientation,
    // Is either the tab node (non-collapsed) or the picker node (collapsed)
    selectedTab,
    // selectedKey is provided so that the TabLine styles are updated when the TabPicker's width updates from a selection change
    selectedKey
  } = props;
  let verticalSelectionIndicatorOffset = 12;
  let {
    direction
  } = useLocale();
  let {
    scale
  } = useProvider();
  let [style, setStyle] = useState({
    width: undefined,
    height: undefined
  });
  useLayoutEffect(() => {
    if (selectedTab) {
      var _ref;

      let styleObj = {
        transform: undefined,
        width: undefined,
        height: undefined
      }; // In RTL, calculate the transform from the right edge of the tablist so that resizing the window doesn't break the Tabline position due to offsetLeft changes

      let offset = direction === 'rtl' ? -1 * (((_ref = selectedTab.offsetParent) == null ? void 0 : _ref.offsetWidth) - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;
      styleObj.transform = orientation === 'vertical' ? "translateY(" + (selectedTab.offsetTop + verticalSelectionIndicatorOffset / 2) + "px)" : "translateX(" + offset + "px)";

      if (orientation === 'horizontal') {
        styleObj.width = selectedTab.offsetWidth + "px";
      } else {
        styleObj.height = selectedTab.offsetHeight - verticalSelectionIndicatorOffset + "px";
      }

      setStyle(styleObj);
    }
  }, [direction, setStyle, selectedTab, orientation, scale, verticalSelectionIndicatorOffset, selectedKey]);
  return /*#__PURE__*/_react.createElement("div", {
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs-selectionIndicator'),
    role: "presentation",
    style: style
  });
}

const $a016f96d614f365ec6ad3cd2df19b52$var$CollapsibleTabList = _react.forwardRef(function (props, ref) {
  let {
    tabListProps,
    density,
    isQuiet,
    isDisabled,
    state,
    selectedTab,
    wrapperRef,
    collapse
  } = props;
  let tabListclassName = classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel-tabs');
  return /*#__PURE__*/_react.createElement("div", {
    ref: wrapperRef,
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-TabsPanel-collapseWrapper')
  }, collapse && /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabPicker, _babelRuntimeHelpersExtends({}, props, {
    className: tabListclassName
  })), !collapse && /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabList, _babelRuntimeHelpersExtends({}, tabListProps, {
    density: density,
    isQuiet: isQuiet,
    isDisabled: isDisabled,
    state: state,
    selectedTab: selectedTab,
    ref: ref,
    orientation: "horizontal",
    className: tabListclassName
  })));
});

const $a016f96d614f365ec6ad3cd2df19b52$var$TabList = _react.forwardRef(function (props, ref) {
  let {
    isQuiet,
    density,
    state,
    isDisabled,
    orientation,
    selectedTab,
    className
  } = props,
      otherProps = _babelRuntimeHelpersObjectWithoutPropertiesLoose(props, ["isQuiet", "density", "state", "isDisabled", "orientation", "selectedTab", "className"]);

  return /*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, otherProps, {
    ref: ref,
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs', "spectrum-Tabs--" + orientation, {
      'spectrum-Tabs--quiet': isQuiet,
      ['spectrum-Tabs--compact']: density === 'compact'
    }, className)
  }), [...state.collection].map(item => /*#__PURE__*/_react.createElement(Tab, {
    key: item.key,
    item: item,
    state: state,
    isDisabled: isDisabled,
    orientation: orientation
  })), /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabLine, {
    orientation: orientation,
    selectedTab: selectedTab
  }));
});

function $a016f96d614f365ec6ad3cd2df19b52$var$TabPicker(props) {
  let {
    isDisabled,
    isQuiet,
    state,
    'aria-labelledby': ariaLabeledBy,
    'aria-label': ariaLabel,
    density,
    className,
    id
  } = props;
  let ref = useRef();
  let [pickerNode, setPickerNode] = useState(null);
  useEffect(() => {
    let node = unwrapDOMRef(ref);
    setPickerNode(node.current);
  }, [ref]);
  let items = [...state.collection].map(item => ({
    rendered: item.rendered,
    textValue: item.textValue,
    id: item.key
  }));
  let pickerProps = {
    'aria-labelledby': ariaLabeledBy,
    'aria-label': ariaLabel
  }; // TODO: Figure out if tabListProps should go onto the div here, v2 doesn't do it

  return /*#__PURE__*/_react.createElement("div", {
    className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Tabs', 'spectrum-Tabs--horizontal', 'spectrum-Tabs--isCollapsed', {
      'spectrum-Tabs--quiet': isQuiet,
      ['spectrum-Tabs--compact']: density === 'compact'
    }, className)
  }, /*#__PURE__*/_react.createElement(SlotProvider, {
    slots: {
      icon: {
        size: 'S',
        UNSAFE_className: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'spectrum-Icon')
      },
      button: {
        focusRingClass: classNames($a221257d7bd2e9d0c131cda7c75f4f5$$interop$default, 'focus-ring')
      }
    }
  }, /*#__PURE__*/_react.createElement(Picker, _babelRuntimeHelpersExtends({}, pickerProps, {
    id: id,
    items: items,
    ref: ref,
    isQuiet: true,
    isDisabled: isDisabled,
    selectedKey: state.selectedKey,
    disabledKeys: state.disabledKeys,
    onSelectionChange: state.setSelectedKey
  }), item => /*#__PURE__*/_react.createElement(_Item, {
    textValue: item.textValue
  }, item.rendered)), pickerNode && /*#__PURE__*/_react.createElement($a016f96d614f365ec6ad3cd2df19b52$var$TabLine, {
    orientation: "horizontal",
    selectedTab: pickerNode,
    selectedKey: state.selectedKey
  })));
}
/**
 * Tabs organize content into multiple sections and allow users to navigate between them. The content under the set of tabs should be related and form a coherent unit.
 */
// forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref


const Tabs = _react.forwardRef($a016f96d614f365ec6ad3cd2df19b52$var$Tabs);

exports.Tabs = Tabs;
//# sourceMappingURL=main.js.map

{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./node_modules/@adobe/spectrum-css-temp/components/button/vars.css","./packages/@react-spectrum/button/src/Button.tsx","./packages/@react-spectrum/button/src/ActionButton.tsx","./packages/@react-spectrum/button/src/FieldButton.tsx","./packages/@react-spectrum/button/src/LogicButton.tsx","./packages/@react-spectrum/button/src/ClearButton.tsx","./packages/@react-spectrum/button/src/ToggleButton.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ElementType, ReactElement} from 'react';\nimport {SpectrumButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\n// todo: CSS hasn't caught up yet, map\nlet VARIANT_MAPPING = {\n  negative: 'warning'\n};\n\nfunction Button<T extends ElementType = 'button'>(props: SpectrumButtonProps<T>, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'button');\n  let {\n    elementType: ElementType = 'button',\n    children,\n    variant,\n    isQuiet,\n    isDisabled,\n    autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  let buttonVariant = variant;\n  if (VARIANT_MAPPING[variant]) {\n    buttonVariant = VARIANT_MAPPING[variant];\n  }\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <ElementType\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-Button',\n            `spectrum-Button--${buttonVariant}`,\n            {\n              'spectrum-Button--quiet': isQuiet,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-Button-label')\n            }\n          }}>\n          {typeof children === 'string'\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </ElementType>\n    </FocusRing>\n  );\n}\n\n/**\n * Buttons allow users to perform an action or to navigate to another page.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nlet _Button = React.forwardRef(Button) as <T extends ElementType = 'button'>(props: SpectrumButtonProps<T> & {ref?: FocusableRef<HTMLElement>}) => ReactElement;\nexport {_Button as Button};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumActionButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionButton(props: SpectrumActionButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    isQuiet,\n    isDisabled,\n    staticColor,\n    children,\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')\n            }\n          }}>\n          {typeof children === 'string' || isTextOnly\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ActionButtons allow users to perform an action.\n * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.\n */\nlet _ActionButton = React.forwardRef(ActionButton);\nexport {_ActionButton as ActionButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ButtonProps} from '@react-types/button';\nimport {classNames, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMProps, FocusableRef, StyleProps} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {RefObject} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\n\ninterface FieldButtonProps extends ButtonProps, DOMProps, StyleProps {\n  isQuiet?: boolean,\n  isActive?: boolean,\n  validationState?: 'valid' | 'invalid',\n  focusRingClass?: string\n}\n\n// @private\nfunction FieldButton(props: FieldButtonProps, ref: FocusableRef) {\n  props = useSlotProps(props, 'button');\n  let {\n    isQuiet,\n    isDisabled,\n    validationState,\n    children,\n    autoFocus,\n    isActive,\n    focusRingClass,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref) as RefObject<HTMLButtonElement>;\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring', focusRingClass)} autoFocus={autoFocus}>\n      <button\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-FieldButton',\n            {\n              'spectrum-FieldButton--quiet': isQuiet,\n              'is-active': isActive || isPressed,\n              'is-disabled': isDisabled,\n              'spectrum-FieldButton--invalid': validationState === 'invalid',\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            }\n          }}>\n          {children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\nlet _FieldButton = React.forwardRef(FieldButton);\nexport {_FieldButton as FieldButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumLogicButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction LogicButton(props: SpectrumLogicButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    variant,\n    children,\n    isDisabled,\n    autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-LogicButton',\n            {\n              [`spectrum-LogicButton--${variant}`]: variant,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        <span className={classNames(styles, 'spectrum-Button-label')}>{children}</span>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * A LogicButton displays an operator within a boolean logic sequence.\n */\nlet _LogicButton = React.forwardRef(LogicButton);\nexport {_LogicButton as LogicButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonElementTypeProps, ButtonProps} from '@react-types/button';\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport CrossSmall from '@spectrum-icons/ui/CrossSmall';\nimport {DOMProps, FocusableRef, StyleProps} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ElementType} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\n\ninterface ClearButtonProps<T extends ElementType = 'button'> extends ButtonProps, AriaButtonElementTypeProps<T>, DOMProps, StyleProps {\n  focusClassName?: string,\n  variant?: 'overBackground',\n  excludeFromTabOrder?: boolean,\n  preventFocus?: boolean\n}\n\nfunction ClearButton(props: ClearButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  let {\n    children = <CrossSmall UNSAFE_className={styles['spectrum-Icon']} />,\n    focusClassName,\n    variant,\n    autoFocus,\n    isDisabled,\n    preventFocus,\n    elementType = preventFocus ? 'div' : 'button' as ElementType,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton({...props, elementType}, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n\n  // For cases like the clear button in a search field, remove the tabIndex so\n  // iOS 14 with VoiceOver doesn't focus the button and hide the keyboard when\n  // moving the cursor over the clear button.\n  if (preventFocus) {\n    delete buttonProps.tabIndex;\n  }\n\n  let ElementType = elementType;\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring', focusClassName)} autoFocus={autoFocus}>\n      <ElementType\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ClearButton',\n            {\n              [`spectrum-ClearButton--${variant}`]: variant,\n              'is-disabled': isDisabled,\n              'is-active': isPressed,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        {children}\n      </ElementType>\n    </FocusRing>\n  );\n}\n\nlet _ClearButton = React.forwardRef(ClearButton);\nexport {_ClearButton as ClearButton};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumToggleButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useToggleButton} from '@react-aria/button';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction ToggleButton(props: SpectrumToggleButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    isQuiet,\n    isDisabled,\n    isEmphasized,\n    staticColor,\n    children,\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let state = useToggleState(props);\n  let {buttonProps, isPressed} = useToggleButton(props, state, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--emphasized': isEmphasized,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered,\n              'is-selected': state.isSelected\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')\n            }\n          }}>\n          {typeof children === 'string' || isTextOnly\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ToggleButtons allow users to toggle a selection on or off, for example\n * switching between two states or modes.\n */\nlet _ToggleButton = React.forwardRef(ToggleButton);\nexport {_ToggleButton as ToggleButton};\n"],"names":["$parcel$interopDefault","a","__esModule","default","VARIANT_MAPPING","negative","Button","props","ref","useProviderProps","useSlotProps","elementType","ElementType","children","variant","isQuiet","isDisabled","autoFocus","otherProps","domRef","useFocusableRef","buttonProps","isPressed","useButton","hoverProps","isHovered","useHover","styleProps","useStyleProps","buttonVariant","classNames","mergeProps","className","icon","size","UNSAFE_className","text","_Button","React","forwardRef","ActionButton","staticColor","isTextOnly","Children","toArray","every","c","isValidElement","_ActionButton","FieldButton","validationState","isActive","focusRingClass","_FieldButton","LogicButton","_LogicButton","ClearButton","focusClassName","preventFocus","tabIndex","_ClearButton","ToggleButton","isEmphasized","state","useToggleState","useToggleButton","isSelected","_ToggleButton"],"version":3,"file":"module.js.map"}
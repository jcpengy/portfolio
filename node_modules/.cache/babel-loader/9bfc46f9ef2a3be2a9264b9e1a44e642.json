{"ast":null,"code":"import { useTabsState } from \"@react-stately/tabs\";\nimport { useTab, useTabs } from \"@react-aria/tabs\";\nimport { useProvider, useProviderProps } from \"@react-spectrum/provider\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { Text } from \"@react-spectrum/text\";\nimport _react, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { mergeProps, useId, useLayoutEffect, useResizeObserver } from \"@react-aria/utils\";\nimport { Item as _Item, Picker } from \"@react-spectrum/picker\";\nimport { FocusRing } from \"@react-aria/focus\";\nimport { classNames, SlotProvider, unwrapDOMRef, useDOMRef, useStyleProps, useValueEffect } from \"@react-spectrum/utils\";\nimport _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nimport { Item } from \"@react-stately/collections\";\nexport { Item };\nimport \"./main.css\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n} // ASSET: /Users/govett/dev/react-spectrum-v3/node_modules/@adobe/spectrum-css-temp/components/tabs/vars.css\n\n\nvar $d8728aa9d94f6b7dd1d3f754a952088$exports = {};\n$d8728aa9d94f6b7dd1d3f754a952088$exports = {\n  \"spectrum-TabsPanel\": \"_spectrum-TabsPanel_0248f\",\n  \"spectrum-TabsPanel--horizontal\": \"_spectrum-TabsPanel--horizontal_0248f\",\n  \"spectrum-TabsPanel--vertical\": \"_spectrum-TabsPanel--vertical_0248f\",\n  \"spectrum-Tabs\": \"_spectrum-Tabs_0248f\",\n  \"spectrum-Tabs-item\": \"_spectrum-Tabs-item_0248f\",\n  \"is-disabled\": \"_is-disabled_0248f\",\n  \"spectrum-Tabs-itemLabel\": \"_spectrum-Tabs-itemLabel_0248f\",\n  \"spectrum-Icon\": \"_spectrum-Icon_0248f\",\n  \"spectrum-Tabs-selectionIndicator\": \"_spectrum-Tabs-selectionIndicator_0248f\",\n  \"spectrum-Tabs--horizontal\": \"_spectrum-Tabs--horizontal_0248f\",\n  \"spectrum-Tabs--compact\": \"_spectrum-Tabs--compact_0248f\",\n  \"spectrum-Tabs--isCollapsed\": \"_spectrum-Tabs--isCollapsed_0248f\",\n  \"spectrum-Tabs--quiet\": \"_spectrum-Tabs--quiet_0248f\",\n  \"spectrum-Tabs--vertical\": \"_spectrum-Tabs--vertical_0248f\",\n  \"spectrum-TabsPanel-collapseWrapper\": \"_spectrum-TabsPanel-collapseWrapper_0248f\",\n  \"spectrum-TabsPanel-tabs\": \"_spectrum-TabsPanel-tabs_0248f\",\n  \"focus-ring\": \"_focus-ring_0248f\",\n  \"is-hovered\": \"_is-hovered_0248f\",\n  \"is-selected\": \"_is-selected_0248f\"\n};\nvar $d8728aa9d94f6b7dd1d3f754a952088$$interop$default = $parcel$interopDefault($d8728aa9d94f6b7dd1d3f754a952088$exports);\n\nfunction $f4a414b256968d66045841d53c86a275$var$Tabs(props, ref) {\n  props = useProviderProps(props);\n\n  let {\n    orientation = 'horizontal',\n    isDisabled,\n    isQuiet,\n    density = 'regular',\n    children\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"orientation\", \"isDisabled\", \"isQuiet\", \"density\", \"children\"]);\n\n  let domRef = useDOMRef(ref);\n  let tablistRef = useRef();\n  let wrapperRef = useRef();\n  let state = useTabsState(props);\n  let {\n    direction\n  } = useLocale();\n  let {\n    styleProps\n  } = useStyleProps(otherProps);\n  let {\n    tabListProps,\n    tabPanelProps\n  } = useTabs(props, state, tablistRef);\n  let [collapse, setCollapse] = useValueEffect(false);\n  let [selectedTab, setSelectedTab] = useState();\n  useEffect(() => {\n    if (tablistRef.current) {\n      let selectedTab = tablistRef.current.querySelector(\"[data-key=\\\"\" + state.selectedKey + \"\\\"]\");\n\n      if (selectedTab != null) {\n        setSelectedTab(selectedTab);\n      }\n    } // collapse is in the dep array so selectedTab can be updated for TabLine positioning\n\n  }, [children, state.selectedKey, collapse, tablistRef]);\n  let checkShouldCollapse = useCallback(() => {\n    let computeShouldCollapse = () => {\n      if (wrapperRef.current) {\n        let tabsComponent = wrapperRef.current;\n        let tabs = tablistRef.current.querySelectorAll('[role=\"tab\"]');\n        let lastTab = tabs[tabs.length - 1];\n        let end = direction === 'rtl' ? 'left' : 'right';\n        let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];\n        let farEdgeLastTab = lastTab == null ? void 0 : lastTab.getBoundingClientRect()[end];\n        let shouldCollapse = direction === 'rtl' ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;\n        return shouldCollapse;\n      }\n    };\n\n    if (orientation !== 'vertical') {\n      setCollapse(function* () {\n        // Make Tabs render in non-collapsed state\n        yield false; // Compute if Tabs should collapse and update\n\n        yield computeShouldCollapse();\n      });\n    }\n  }, [tablistRef, wrapperRef, direction, orientation, setCollapse]);\n  useEffect(() => {\n    checkShouldCollapse();\n  }, [children, checkShouldCollapse]);\n  useResizeObserver({\n    ref: wrapperRef,\n    onResize: checkShouldCollapse\n  }); // When the tabs are collapsed, the tabPanel should be labelled by the Picker button element.\n\n  let collapsibleTabListId = useId();\n\n  if (collapse && orientation !== 'vertical') {\n    tabPanelProps['aria-labelledby'] = collapsibleTabListId;\n  }\n\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, styleProps, {\n    ref: domRef,\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-TabsPanel', \"spectrum-TabsPanel--\" + orientation, styleProps.className)\n  }), orientation === 'vertical' && /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$TabList, _babelRuntimeHelpersEsmExtends({}, tabListProps, {\n    ref: tablistRef,\n    orientation: orientation,\n    density: density,\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    state: state,\n    selectedTab: selectedTab\n  })), orientation !== 'vertical' && /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$CollapsibleTabList, _babelRuntimeHelpersEsmExtends({}, props, {\n    id: collapsibleTabListId,\n    wrapperRef: wrapperRef,\n    collapse: collapse,\n    tabListProps: tabListProps,\n    state: state,\n    selectedTab: selectedTab,\n    ref: tablistRef\n  })), /*#__PURE__*/_react.createElement(\"div\", tabPanelProps, state.selectedItem && state.selectedItem.props.children));\n}\n\nexport function Tab(props) {\n  let {\n    item,\n    state,\n    isDisabled: propsDisabled\n  } = props;\n  let {\n    key,\n    rendered\n  } = item;\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n  let ref = useRef();\n  let {\n    tabProps\n  } = useTab({\n    item,\n    isDisabled\n  }, state, ref);\n  let {\n    hoverProps,\n    isHovered\n  } = useHover(_babelRuntimeHelpersEsmExtends({}, props));\n  let isSelected = state.selectedKey === key;\n  return /*#__PURE__*/_react.createElement(FocusRing, {\n    focusRingClass: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'focus-ring')\n  }, /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, mergeProps(tabProps, hoverProps), {\n    ref: ref,\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Tabs-item', {\n      'is-selected': isSelected,\n      'is-disabled': isDisabled,\n      'is-hovered': isHovered\n    })\n  }), /*#__PURE__*/_react.createElement(SlotProvider, {\n    slots: {\n      icon: {\n        size: 'S',\n        UNSAFE_className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Icon')\n      },\n      text: {\n        UNSAFE_className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Tabs-itemLabel')\n      }\n    }\n  }, typeof rendered === 'string' ? /*#__PURE__*/_react.createElement(Text, null, rendered) : rendered)));\n}\n\nfunction $f4a414b256968d66045841d53c86a275$var$TabLine(props) {\n  let {\n    orientation,\n    // Is either the tab node (non-collapsed) or the picker node (collapsed)\n    selectedTab,\n    // selectedKey is provided so that the TabLine styles are updated when the TabPicker's width updates from a selection change\n    selectedKey\n  } = props;\n  let verticalSelectionIndicatorOffset = 12;\n  let {\n    direction\n  } = useLocale();\n  let {\n    scale\n  } = useProvider();\n  let [style, setStyle] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useLayoutEffect(() => {\n    if (selectedTab) {\n      var _ref;\n\n      let styleObj = {\n        transform: undefined,\n        width: undefined,\n        height: undefined\n      }; // In RTL, calculate the transform from the right edge of the tablist so that resizing the window doesn't break the Tabline position due to offsetLeft changes\n\n      let offset = direction === 'rtl' ? -1 * (((_ref = selectedTab.offsetParent) == null ? void 0 : _ref.offsetWidth) - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;\n      styleObj.transform = orientation === 'vertical' ? \"translateY(\" + (selectedTab.offsetTop + verticalSelectionIndicatorOffset / 2) + \"px)\" : \"translateX(\" + offset + \"px)\";\n\n      if (orientation === 'horizontal') {\n        styleObj.width = selectedTab.offsetWidth + \"px\";\n      } else {\n        styleObj.height = selectedTab.offsetHeight - verticalSelectionIndicatorOffset + \"px\";\n      }\n\n      setStyle(styleObj);\n    }\n  }, [direction, setStyle, selectedTab, orientation, scale, verticalSelectionIndicatorOffset, selectedKey]);\n  return /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Tabs-selectionIndicator'),\n    role: \"presentation\",\n    style: style\n  });\n}\n\nconst $f4a414b256968d66045841d53c86a275$var$CollapsibleTabList = _react.forwardRef(function (props, ref) {\n  let {\n    tabListProps,\n    density,\n    isQuiet,\n    isDisabled,\n    state,\n    selectedTab,\n    wrapperRef,\n    collapse\n  } = props;\n  let tabListclassName = classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-TabsPanel-tabs');\n  return /*#__PURE__*/_react.createElement(\"div\", {\n    ref: wrapperRef,\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-TabsPanel-collapseWrapper')\n  }, collapse && /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$TabPicker, _babelRuntimeHelpersEsmExtends({}, props, {\n    className: tabListclassName\n  })), !collapse && /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$TabList, _babelRuntimeHelpersEsmExtends({}, tabListProps, {\n    density: density,\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    state: state,\n    selectedTab: selectedTab,\n    ref: ref,\n    orientation: \"horizontal\",\n    className: tabListclassName\n  })));\n});\n\nconst $f4a414b256968d66045841d53c86a275$var$TabList = _react.forwardRef(function (props, ref) {\n  let {\n    isQuiet,\n    density,\n    state,\n    isDisabled,\n    orientation,\n    selectedTab,\n    className\n  } = props,\n      otherProps = _babelRuntimeHelpersEsmObjectWithoutPropertiesLoose(props, [\"isQuiet\", \"density\", \"state\", \"isDisabled\", \"orientation\", \"selectedTab\", \"className\"]);\n\n  return /*#__PURE__*/_react.createElement(\"div\", _babelRuntimeHelpersEsmExtends({}, otherProps, {\n    ref: ref,\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Tabs', \"spectrum-Tabs--\" + orientation, {\n      'spectrum-Tabs--quiet': isQuiet,\n      ['spectrum-Tabs--compact']: density === 'compact'\n    }, className)\n  }), [...state.collection].map(item => /*#__PURE__*/_react.createElement(Tab, {\n    key: item.key,\n    item: item,\n    state: state,\n    isDisabled: isDisabled,\n    orientation: orientation\n  })), /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$TabLine, {\n    orientation: orientation,\n    selectedTab: selectedTab\n  }));\n});\n\nfunction $f4a414b256968d66045841d53c86a275$var$TabPicker(props) {\n  let {\n    isDisabled,\n    isQuiet,\n    state,\n    'aria-labelledby': ariaLabeledBy,\n    'aria-label': ariaLabel,\n    density,\n    className,\n    id\n  } = props;\n  let ref = useRef();\n  let [pickerNode, setPickerNode] = useState(null);\n  useEffect(() => {\n    let node = unwrapDOMRef(ref);\n    setPickerNode(node.current);\n  }, [ref]);\n  let items = [...state.collection].map(item => ({\n    rendered: item.rendered,\n    textValue: item.textValue,\n    id: item.key\n  }));\n  let pickerProps = {\n    'aria-labelledby': ariaLabeledBy,\n    'aria-label': ariaLabel\n  }; // TODO: Figure out if tabListProps should go onto the div here, v2 doesn't do it\n\n  return /*#__PURE__*/_react.createElement(\"div\", {\n    className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Tabs', 'spectrum-Tabs--horizontal', 'spectrum-Tabs--isCollapsed', {\n      'spectrum-Tabs--quiet': isQuiet,\n      ['spectrum-Tabs--compact']: density === 'compact'\n    }, className)\n  }, /*#__PURE__*/_react.createElement(SlotProvider, {\n    slots: {\n      icon: {\n        size: 'S',\n        UNSAFE_className: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'spectrum-Icon')\n      },\n      button: {\n        focusRingClass: classNames($d8728aa9d94f6b7dd1d3f754a952088$$interop$default, 'focus-ring')\n      }\n    }\n  }, /*#__PURE__*/_react.createElement(Picker, _babelRuntimeHelpersEsmExtends({}, pickerProps, {\n    id: id,\n    items: items,\n    ref: ref,\n    isQuiet: true,\n    isDisabled: isDisabled,\n    selectedKey: state.selectedKey,\n    disabledKeys: state.disabledKeys,\n    onSelectionChange: state.setSelectedKey\n  }), item => /*#__PURE__*/_react.createElement(_Item, {\n    textValue: item.textValue\n  }, item.rendered)), pickerNode && /*#__PURE__*/_react.createElement($f4a414b256968d66045841d53c86a275$var$TabLine, {\n    orientation: \"horizontal\",\n    selectedTab: pickerNode,\n    selectedKey: state.selectedKey\n  })));\n}\n/**\n * Tabs organize content into multiple sections and allow users to navigate between them. The content under the set of tabs should be related and form a coherent unit.\n */\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\n\n\nexport const Tabs = _react.forwardRef($f4a414b256968d66045841d53c86a275$var$Tabs);","map":{"version":3,"sources":["node_modules/@parcel/scope-hoisting/lib/helpers.js","node_modules/@adobe/spectrum-css-temp/components/tabs/vars.css","packages/@react-spectrum/tabs/src/Tabs.tsx"],"names":["a","props","useProviderProps","orientation","density","children","otherProps","domRef","useDOMRef","tablistRef","useRef","wrapperRef","state","useTabsState","direction","useLocale","styleProps","useStyleProps","tabPanelProps","useTabs","useValueEffect","useState","useEffect","selectedTab","setSelectedTab","checkShouldCollapse","useCallback","computeShouldCollapse","tabsComponent","tabs","lastTab","end","farEdgeTabList","farEdgeLastTab","shouldCollapse","setCollapse","useResizeObserver","ref","onResize","collapsibleTabListId","useId","collapse","classNames","isDisabled","propsDisabled","rendered","tabProps","useTab","isHovered","useHover","isSelected","mergeProps","icon","size","UNSAFE_className","text","selectedKey","verticalSelectionIndicatorOffset","scale","useProvider","width","height","undefined","useLayoutEffect","styleObj","transform","offset","setStyle","style","CollapsibleTabList","tabListclassName","TabList","className","item","id","node","unwrapDOMRef","setPickerNode","items","textValue","key","pickerProps","ariaLabel","button","focusRingClass","setSelectedKey","pickerNode","_Tabs","React"],"mappings":"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","sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n@import './index.css';\n@import './skin.css';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, unwrapDOMRef, useDOMRef, useStyleProps, useValueEffect} from '@react-spectrum/utils';\nimport {DOMProps, DOMRef, Node, Orientation} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {Item, Picker} from '@react-spectrum/picker';\nimport {mergeProps, useId, useLayoutEffect} from '@react-aria/utils';\nimport React, {HTMLAttributes, Key, MutableRefObject, ReactElement, useCallback, useEffect, useRef, useState} from 'react';\nimport {SingleSelectListState} from '@react-stately/list';\nimport {SpectrumPickerProps} from '@react-types/select';\nimport {SpectrumTabsProps} from '@react-types/tabs';\nimport styles from '@adobe/spectrum-css-temp/components/tabs/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useHover} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\nimport {useResizeObserver} from '@react-aria/utils';\nimport {useTab, useTabs} from '@react-aria/tabs';\nimport {useTabsState} from '@react-stately/tabs';\n\nfunction Tabs<T extends object>(props: SpectrumTabsProps<T>, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {\n    orientation = 'horizontal' as Orientation,\n    isDisabled,\n    isQuiet,\n    density = 'regular',\n    children,\n    ...otherProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let tablistRef = useRef<HTMLDivElement>();\n  let wrapperRef = useRef<HTMLDivElement>();\n  let state = useTabsState(props);\n\n  let {direction} = useLocale();\n  let {styleProps} = useStyleProps(otherProps);\n  let {tabListProps, tabPanelProps} = useTabs(props, state, tablistRef);\n  let [collapse, setCollapse] = useValueEffect(false);\n  let [selectedTab, setSelectedTab] = useState<HTMLElement>();\n\n  useEffect(() => {\n    if (tablistRef.current) {\n      let selectedTab: HTMLElement = tablistRef.current.querySelector(`[data-key=\"${state.selectedKey}\"]`);\n\n      if (selectedTab != null) {\n        setSelectedTab(selectedTab);\n      }\n    }\n    // collapse is in the dep array so selectedTab can be updated for TabLine positioning\n  }, [children, state.selectedKey, collapse, tablistRef]);\n\n  let checkShouldCollapse = useCallback(() => {\n    let computeShouldCollapse = () => {\n      if (wrapperRef.current) {\n        let tabsComponent = wrapperRef.current;\n        let tabs = tablistRef.current.querySelectorAll('[role=\"tab\"]');\n        let lastTab = tabs[tabs.length - 1];\n\n        let end = direction === 'rtl' ? 'left' : 'right';\n        let farEdgeTabList = tabsComponent.getBoundingClientRect()[end];\n        let farEdgeLastTab = lastTab?.getBoundingClientRect()[end];\n        let shouldCollapse = direction === 'rtl' ? farEdgeLastTab < farEdgeTabList : farEdgeTabList < farEdgeLastTab;\n\n        return shouldCollapse;\n      }\n    };\n\n    if (orientation !== 'vertical') {\n      setCollapse(function* () {\n        // Make Tabs render in non-collapsed state\n        yield false;\n\n        // Compute if Tabs should collapse and update\n        yield computeShouldCollapse();\n      });\n    }\n  }, [tablistRef, wrapperRef, direction, orientation, setCollapse]);\n\n  useEffect(() => {\n    checkShouldCollapse();\n  }, [children, checkShouldCollapse]);\n\n  useResizeObserver({ref: wrapperRef, onResize: checkShouldCollapse});\n\n  // When the tabs are collapsed, the tabPanel should be labelled by the Picker button element.\n  let collapsibleTabListId = useId();\n  if (collapse && orientation !== 'vertical') {\n    tabPanelProps['aria-labelledby'] = collapsibleTabListId;\n  }\n\n  return (\n    <div\n      {...styleProps}\n      ref={domRef}\n      className={classNames(\n        styles,\n        'spectrum-TabsPanel',\n        `spectrum-TabsPanel--${orientation}`,\n        styleProps.className\n      )}>\n      {orientation === 'vertical' &&\n        <TabList\n          {...tabListProps}\n          ref={tablistRef}\n          orientation={orientation}\n          density={density}\n          isQuiet={isQuiet}\n          isDisabled={isDisabled}\n          state={state}\n          selectedTab={selectedTab} />\n      }\n      {orientation !== 'vertical' &&\n        <CollapsibleTabList\n          {...props}\n          id={collapsibleTabListId}\n          wrapperRef={wrapperRef}\n          collapse={collapse}\n          tabListProps={tabListProps}\n          state={state}\n          selectedTab={selectedTab}\n          ref={tablistRef} />\n      }\n      <div {...tabPanelProps}>\n        {state.selectedItem && state.selectedItem.props.children}\n      </div>\n    </div>\n  );\n}\n\ninterface TabProps<T> extends DOMProps {\n  item: Node<T>,\n  state: SingleSelectListState<T>,\n  isDisabled?: boolean,\n  orientation?: Orientation\n}\n\nexport function Tab<T>(props: TabProps<T>) {\n  let {item, state, isDisabled: propsDisabled} = props;\n  let {key, rendered} = item;\n  let isDisabled = propsDisabled || state.disabledKeys.has(key);\n\n  let ref = useRef<HTMLDivElement>();\n  let {tabProps} = useTab({item, isDisabled}, state, ref);\n\n  let {hoverProps, isHovered} = useHover({\n    ...props\n  });\n  let isSelected = state.selectedKey === key;\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...mergeProps(tabProps, hoverProps)}\n        ref={ref}\n        className={classNames(\n          styles,\n          'spectrum-Tabs-item',\n          {\n            'is-selected': isSelected,\n            'is-disabled': isDisabled,\n            'is-hovered': isHovered\n          }\n        )}>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-Tabs-itemLabel')\n            }\n          }}>\n          {typeof rendered === 'string'\n            ? <Text>{rendered}</Text>\n            : rendered}\n        </SlotProvider>\n      </div>\n    </FocusRing>\n  );\n}\n\ninterface TabLineProps {\n  orientation?: Orientation,\n  selectedTab?: HTMLElement,\n  selectedKey?: Key\n}\n\nfunction TabLine(props: TabLineProps) {\n  let {\n    orientation,\n    // Is either the tab node (non-collapsed) or the picker node (collapsed)\n    selectedTab,\n    // selectedKey is provided so that the TabLine styles are updated when the TabPicker's width updates from a selection change\n    selectedKey\n  } = props;\n\n  let verticalSelectionIndicatorOffset = 12;\n  let {direction} = useLocale();\n  let {scale} = useProvider();\n\n  let [style, setStyle] = useState({\n    width: undefined,\n    height: undefined\n  });\n\n  useLayoutEffect(() => {\n    if (selectedTab) {\n      let styleObj = {transform: undefined, width: undefined, height: undefined};\n      // In RTL, calculate the transform from the right edge of the tablist so that resizing the window doesn't break the Tabline position due to offsetLeft changes\n      let offset = direction === 'rtl' ? -1 * ((selectedTab.offsetParent as HTMLElement)?.offsetWidth - selectedTab.offsetWidth - selectedTab.offsetLeft) : selectedTab.offsetLeft;\n      styleObj.transform = orientation === 'vertical'\n        ? `translateY(${selectedTab.offsetTop + verticalSelectionIndicatorOffset / 2}px)`\n        : `translateX(${offset}px)`;\n\n      if (orientation === 'horizontal') {\n        styleObj.width = `${selectedTab.offsetWidth}px`;\n      } else {\n        styleObj.height = `${selectedTab.offsetHeight - verticalSelectionIndicatorOffset}px`;\n      }\n      setStyle(styleObj);\n    }\n\n  }, [direction, setStyle, selectedTab, orientation, scale, verticalSelectionIndicatorOffset, selectedKey]);\n\n  return <div className={classNames(styles, 'spectrum-Tabs-selectionIndicator')} role=\"presentation\" style={style} />;\n}\n\ninterface CollapsibleTabListProps<T> extends TabListProps<T>, TabPickerProps<T> {\n  tabListProps?: HTMLAttributes<HTMLElement>,\n  wrapperRef: MutableRefObject<HTMLDivElement>,\n  collapse?: boolean,\n  tabListclassName?: string\n}\n\nconst CollapsibleTabList = React.forwardRef(function <T> (props: CollapsibleTabListProps<T>, ref: MutableRefObject<HTMLDivElement>) {\n  let {\n    tabListProps,\n    density,\n    isQuiet,\n    isDisabled,\n    state,\n    selectedTab,\n    wrapperRef,\n    collapse\n  } = props;\n\n  let tabListclassName = classNames(styles, 'spectrum-TabsPanel-tabs');\n\n  return (\n    <div\n      ref={wrapperRef}\n      className={classNames(\n        styles,\n        'spectrum-TabsPanel-collapseWrapper'\n      )}>\n      {collapse && <TabPicker {...props} className={tabListclassName} />}\n      {!collapse && (\n        <TabList\n          {...tabListProps}\n          density={density}\n          isQuiet={isQuiet}\n          isDisabled={isDisabled}\n          state={state}\n          selectedTab={selectedTab}\n          ref={ref}\n          orientation=\"horizontal\"\n          className={tabListclassName} />\n      )}\n    </div>\n  );\n});\n\ninterface TabListProps<T> {\n  isQuiet?: boolean,\n  density?: 'compact' | 'regular',\n  isDisabled?: boolean,\n  orientation?: Orientation,\n  state: SingleSelectListState<T>,\n  selectedTab: HTMLElement,\n  className?: string\n}\n\nconst TabList = React.forwardRef(function <T> (props: TabListProps<T>, ref: MutableRefObject<HTMLDivElement>) {\n  let {\n    isQuiet,\n    density,\n    state,\n    isDisabled,\n    orientation,\n    selectedTab,\n    className,\n    ...otherProps\n  } = props;\n\n  return (\n    <div\n      {...otherProps}\n      ref={ref}\n      className={classNames(\n        styles,\n        'spectrum-Tabs',\n        `spectrum-Tabs--${orientation}`,\n        {\n          'spectrum-Tabs--quiet': isQuiet,\n          ['spectrum-Tabs--compact']: density === 'compact'\n        },\n        className\n      )}>\n      {[...state.collection].map((item) => (\n        <Tab key={item.key} item={item} state={state} isDisabled={isDisabled} orientation={orientation} />\n      ))}\n      <TabLine orientation={orientation} selectedTab={selectedTab} />\n    </div>\n  );\n});\n\ninterface TabPickerProps<T> extends SpectrumPickerProps<T> {\n  density?: 'compact' | 'regular',\n  state: SingleSelectListState<T>,\n  className?: string\n}\n\nfunction TabPicker<T>(props: TabPickerProps<T>) {\n  let {\n    isDisabled,\n    isQuiet,\n    state,\n    'aria-labelledby': ariaLabeledBy,\n    'aria-label': ariaLabel,\n    density,\n    className,\n    id\n  } = props;\n\n  let ref = useRef();\n  let [pickerNode, setPickerNode] = useState(null);\n\n  useEffect(() => {\n    let node = unwrapDOMRef(ref);\n    setPickerNode(node.current);\n  }, [ref]);\n\n  let items = [...state.collection].map((item) => ({\n    rendered: item.rendered,\n    textValue: item.textValue,\n    id: item.key\n  }));\n\n  let pickerProps = {\n    'aria-labelledby': ariaLabeledBy,\n    'aria-label': ariaLabel\n  };\n\n  // TODO: Figure out if tabListProps should go onto the div here, v2 doesn't do it\n  return (\n    <div\n      className={classNames(\n        styles,\n        'spectrum-Tabs',\n        'spectrum-Tabs--horizontal',\n        'spectrum-Tabs--isCollapsed',\n        {\n          'spectrum-Tabs--quiet': isQuiet,\n          ['spectrum-Tabs--compact']: density === 'compact'\n        },\n        className\n      )}>\n      <SlotProvider\n        slots={{\n          icon: {\n            size: 'S',\n            UNSAFE_className: classNames(styles, 'spectrum-Icon')\n          },\n          button: {\n            focusRingClass: classNames(styles, 'focus-ring')\n          }\n        }}>\n        <Picker\n          {...pickerProps}\n          id={id}\n          items={items}\n          ref={ref}\n          isQuiet\n          isDisabled={isDisabled}\n          selectedKey={state.selectedKey}\n          disabledKeys={state.disabledKeys}\n          onSelectionChange={state.setSelectedKey}>\n          {item => <Item textValue={item.textValue}>{item.rendered}</Item>}\n        </Picker>\n        {pickerNode && <TabLine orientation=\"horizontal\" selectedTab={pickerNode} selectedKey={state.selectedKey} />}\n      </SlotProvider>\n    </div>\n  );\n}\n\n/**\n * Tabs organize content into multiple sections and allow users to navigate between them. The content under the set of tabs should be related and form a coherent unit.\n */\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\nconst _Tabs = React.forwardRef(Tabs) as <T>(props: SpectrumTabsProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_Tabs as Tabs};\n"]},"metadata":{},"sourceType":"module"}
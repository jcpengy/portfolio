{"mappings":";;;;;;;;;AAgBA,MAAMA,kDAAa,GAAG,IAAtB,C,CAA4B;;AAC5B,MAAMC,qDAAgB,GAAG,GAAzB;AAeA,IAAIC,6CAAQ,GAAG,EAAf;AACA,IAAIC,8CAAS,GAAG,CAAhB;AACA,IAAIC,mDAAc,GAAG,KAArB;AACA,IAAIC,wDAAmB,GAAG,IAA1B;AACA,IAAIC,0DAAqB,GAAG,IAA5B;AAEA;;;;;;AAKO,SAASC,sBAAT,CAAgCC,KAAhC,EAAiF;AACtF,MAAI;AAACC,IAAAA,KAAK,GAAGT;AAAT,MAA0BQ,KAA9B;AACA,MAAI;AAACE,IAAAA,MAAD;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAwBC,sBAAsB,CAACL,KAAD,CAAlD;AACA,MAAIM,EAAE,GAAGC,OAAO,CAAC,WAAS,EAAEZ,8CAAZ,EAAyB,EAAzB,CAAhB;;AAEA,MAAIa,kBAAkB,GAAG,MAAM;AAC7Bd,IAAAA,6CAAQ,CAACY,EAAD,CAAR,GAAeG,WAAf;AACD,GAFD;;AAIA,MAAIC,iBAAiB,GAAG,MAAM;AAC5B,SAAK,IAAIC,aAAT,IAA0BjB,6CAA1B,EAAoC;AAClC,UAAIiB,aAAa,KAAKL,EAAtB,EAA0B;AACxBZ,QAAAA,6CAAQ,CAACiB,aAAD,CAAR;AACA,eAAOjB,6CAAQ,CAACiB,aAAD,CAAf;AACD;AACF;AACF,GAPD;;AASA,MAAIC,WAAW,GAAG,MAAM;AACtBF,IAAAA,iBAAiB;AACjBF,IAAAA,kBAAkB;AAClBZ,IAAAA,mDAAc,GAAG,IAAjB;AACAO,IAAAA,IAAI;;AACJ,QAAIN,wDAAJ,EAAyB;AACvBgB,MAAAA,YAAY,CAAChB,wDAAD,CAAZ;AACAA,MAAAA,wDAAmB,GAAG,IAAtB;AACD;;AACD,QAAIC,0DAAJ,EAA2B;AACzBe,MAAAA,YAAY,CAACf,0DAAD,CAAZ;AACAA,MAAAA,0DAAqB,GAAG,IAAxB;AACD;AACF,GAbD;;AAeA,MAAIW,WAAW,GAAG,MAAM;AACtBL,IAAAA,KAAK;;AACL,QAAIP,wDAAJ,EAAyB;AACvBgB,MAAAA,YAAY,CAAChB,wDAAD,CAAZ;AACAA,MAAAA,wDAAmB,GAAG,IAAtB;AACD;;AACD,QAAID,mDAAJ,EAAoB;AAClB,UAAIE,0DAAJ,EAA2B;AACzBe,QAAAA,YAAY,CAACf,0DAAD,CAAZ;AACD;;AACDA,MAAAA,0DAAqB,GAAGgB,UAAU,CAAC,MAAM;AACvC,eAAOpB,6CAAQ,CAACY,EAAD,CAAf;AACAR,QAAAA,0DAAqB,GAAG,IAAxB;AACAF,QAAAA,mDAAc,GAAG,KAAjB;AACD,OAJiC,EAI/BH,qDAJ+B,CAAlC;AAKD;AACF,GAhBD;;AAkBA,MAAIsB,aAAa,GAAG,MAAM;AACxBL,IAAAA,iBAAiB;AACjBF,IAAAA,kBAAkB;;AAClB,QAAI,CAACN,MAAD,IAAW,CAACL,wDAAZ,IAAmC,CAACD,mDAAxC,EAAwD;AACtDC,MAAAA,wDAAmB,GAAGiB,UAAU,CAAC,MAAM;AACrCjB,QAAAA,wDAAmB,GAAG,IAAtB;AACAD,QAAAA,mDAAc,GAAG,IAAjB;AACAgB,QAAAA,WAAW;AACZ,OAJ+B,EAI7BX,KAJ6B,CAAhC;AAKD,KAND,MAMO,IAAI,CAACC,MAAL,EAAa;AAClBU,MAAAA,WAAW;AACZ;AACF,GAZD,CAnDsF,CAiEtF;;;AACAI,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX,UAAIC,OAAO,GAAGvB,6CAAQ,CAACY,EAAD,CAAtB;;AACA,UAAIW,OAAJ,EAAa;AACX,eAAOvB,6CAAQ,CAACY,EAAD,CAAf;AACD;AACF,KALD;AAMD,GAPQ,EAON,CAACA,EAAD,CAPM,CAAT;AASA,SAAO;AACLJ,IAAAA,MADK;AAELC,IAAAA,IAAI,EAAGe,SAAD,IAAe;AACnB,UAAI,CAACA,SAAD,IAAcjB,KAAK,GAAG,CAA1B,EAA6B;AAC3Bc,QAAAA,aAAa;AACd,OAFD,MAEO;AACLH,QAAAA,WAAW;AACZ;AACF,KARI;AASLR,IAAAA,KAAK,EAAE,MAAM;AACXK,MAAAA,WAAW;AACZ;AAXI,GAAP;AAaD","sources":["./packages/@react-stately/tooltip/src/useTooltipTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {useEffect, useMemo} from 'react';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\n\nconst TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\nconst TOOLTIP_COOLDOWN = 500;\n\nexport interface TooltipTriggerState {\n  /** Whether the tooltip is currently showing. */\n  isOpen: boolean,\n  /**\n   * Shows the tooltip. By default, the tooltip becomes visible after a delay\n   * depending on a global warmup timer. The `immediate` option shows the\n   * tooltip immediately instead.\n   */\n  open(immediate?: boolean): void,\n  /** Hides the tooltip. */\n  close(): void\n}\n\nlet tooltips = {};\nlet tooltipId = 0;\nlet globalWarmedUp = false;\nlet globalWarmUpTimeout = null;\nlet globalCooldownTimeout = null;\n\n/**\n * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides\n * methods to toggle this state. Ensures only one tooltip is open at a time and controls\n * the delay for showing a tooltip.\n */\nexport function useTooltipTriggerState(props: TooltipTriggerProps): TooltipTriggerState {\n  let {delay = TOOLTIP_DELAY} = props;\n  let {isOpen, open, close} = useOverlayTriggerState(props);\n  let id = useMemo(() => `${++tooltipId}`, []);\n\n  let ensureTooltipEntry = () => {\n    tooltips[id] = hideTooltip;\n  };\n\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in tooltips) {\n      if (hideTooltipId !== id) {\n        tooltips[hideTooltipId]();\n        delete tooltips[hideTooltipId];\n      }\n    }\n  };\n\n  let showTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    globalWarmedUp = true;\n    open();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalCooldownTimeout) {\n      clearTimeout(globalCooldownTimeout);\n      globalCooldownTimeout = null;\n    }\n  };\n\n  let hideTooltip = () => {\n    close();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalWarmedUp) {\n      if (globalCooldownTimeout) {\n        clearTimeout(globalCooldownTimeout);\n      }\n      globalCooldownTimeout = setTimeout(() => {\n        delete tooltips[id];\n        globalCooldownTimeout = null;\n        globalWarmedUp = false;\n      }, TOOLTIP_COOLDOWN);\n    }\n  };\n\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    if (!isOpen && !globalWarmUpTimeout && !globalWarmedUp) {\n      globalWarmUpTimeout = setTimeout(() => {\n        globalWarmUpTimeout = null;\n        globalWarmedUp = true;\n        showTooltip();\n      }, delay);\n    } else if (!isOpen) {\n      showTooltip();\n    }\n  };\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      let tooltip = tooltips[id];\n      if (tooltip) {\n        delete tooltips[id];\n      }\n    };\n  }, [id]);\n\n  return {\n    isOpen,\n    open: (immediate) => {\n      if (!immediate && delay > 0) {\n        warmupTooltip();\n      } else {\n        showTooltip();\n      }\n    },\n    close: () => {\n      hideTooltip();\n    }\n  };\n}\n"],"names":["TOOLTIP_DELAY","TOOLTIP_COOLDOWN","tooltips","tooltipId","globalWarmedUp","globalWarmUpTimeout","globalCooldownTimeout","useTooltipTriggerState","props","delay","isOpen","open","close","useOverlayTriggerState","id","useMemo","ensureTooltipEntry","hideTooltip","closeOpenTooltips","hideTooltipId","showTooltip","clearTimeout","setTimeout","warmupTooltip","useEffect","tooltip","immediate"],"version":3,"file":"main.js.map"}